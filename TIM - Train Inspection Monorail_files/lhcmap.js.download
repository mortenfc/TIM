function ResponsiveLHCMap () {  //This function help to adapt the canvas with the screen
    var myclass = document.getElementById("lhcmap");
    var test = screen.width;
    var x,y;

    if (test > 1280) {
        x = 480;
        y = 300;
    } else {
        x = myclass.offsetWidth;
        y = myclass.offsetHeight;
    }

    myclass.width = x;
    myclass.height = y;
   
}

function LHCMap (canvas, tim_names = [], tim_colors= []) {
    /* Private members */
	var tim_names = tim_names;
	var tim_colors = tim_colors;
		
    var train_position = new Array(tim_names.length);
    var canvas = canvas;
    var context = $(canvas).get(0).getContext("2d");

    var center_x = 0.49 * $(canvas).width();
    var center_y = 0.5166 * $(canvas).height();

    var ellipse_a = 0.465625 * $(canvas).width();
    var ellipse_b =0.38333 * $(canvas).height();

    var length = 0.5* $(canvas).width();
	
	this.positions = new Array(tim_names.length);

    var dcum_angle_db = [
        [3380, 3.4],
        [3610, 3.29],
        [4270, 3.178],
        [5890, 2.83],
        [6399.5, 2.635],
        [6935.6, 2.59],
        [7610, 2.547],
        [9230, 2.435],
        [9753, 2.32],        
        [9950, 2.2],
        [10000, 2.02],
        [10040, 1.87],
        [10241.9, 1.71],
        [10940, 1.54],
        [12381.9, 1.42],
        [13080, 1.33],
        [13150,1.26],
        [13440,0.85],
        [14288.2, 0.73],
        [15720, 0.705],
        [15894, 0.7],
        [16430, 0.55],
        [16660, 0.43],
        [16905.5, 0.3],
        [16940, 0.27, "UJ67"],
        [17440, 0.17, "UP68"],
        [17600, 0.09, "R68"],
        [18325, -0.045, "R69"],
        [19050, -0.16, "R71"],    
        [19753, -0.22],
        [20030, -0.27],
        [20235, -0.33],
        [20940, -0.395, "R78"],
        [21660, -0.415, "R79"],
        [22380, -0.455, "R81"],
        [23050, -0.53, "UJ83"],
        [23280, -0.65, "UJ84"]
    ];

    /* Public methods */

    this.draw = function () {
        context.clearRect(0, 0, $(canvas).width(), $(canvas).height());
       
        for (var i=0; i<this.positions.length; i++) {
			if ((this.positions[i] > 3380) &&(this.positions[i]<23280)) {
                				
				this.draw_point(this.positions[i], tim_names[i], tim_colors[i]);     
			}
        }     
    }

    this.draw_point = function (dcum, tim_name, tim_color, draw = true) {
        var angle = get_angle(dcum);
        var point = { "x": length*Math.cos(angle), "y": length*Math.sin(angle)};
        var intersection = intersection_ellipse_line(ellipse_a, ellipse_b, point["y"], point["x"]);

        if(draw) {
            tim_ellipse(center_x + intersection["x"], center_y - intersection["y"], tim_name, tim_color);
        };

        return intersection;
    }

    this.draw_arc = function (dcum_start, dcum_end, color, offset =0) {
        if (dcum_start > dcum_end) {
            var tmp = dcum_start;
            dcum_start = dcum_end;
            dcum_end = tmp;
        }

        var angle_start = get_angle(dcum_start);
        var angle_end = get_angle (dcum_end);
        arc(center_x, center_y, ellipse_a*2, ellipse_b*2, angle_start, angle_end, color, offset);
    }

    var get_angle = function (dcum) {
        var index = -1;
        for (var i=0; i< dcum_angle_db.length; i++) {
            if (dcum < dcum_angle_db[i][0]) {
                index = i;
                break;
            }
        }

        var first_part= (dcum-dcum_angle_db[index][0])/(dcum_angle_db[index-1][0]-dcum_angle_db[index][0])*dcum_angle_db[index-1][1];
        var second_part = (dcum-dcum_angle_db[index-1][0])/(dcum_angle_db[index-1][0]-dcum_angle_db[index][0])*dcum_angle_db[index][1];
        
        var angle = first_part - second_part;
        return angle;
    }

    var tim_ellipse = function (cx, cy, name, color) {
        if (screen.width > 1280) {
            ellipse(cx,cy,10,10,color);
        } else {
            ellipse(cx,cy,2,2,color);
        }

        context.font = "bold 16px Arial";
        context.fillText(name, cx-20, cy-12);
    }

    var arc = function (cx, cy, w, h, start_angle, end_angle, color, offset=0) {      
        context.save();
        context.translate(cx, cy);

        var start_point = intersection_ellipse_angle (ellipse_a ,ellipse_b, start_angle);
        var end_point = intersection_ellipse_angle (ellipse_a ,ellipse_b, end_angle);

        var rect1 = { "x": 0.0, "y": 0.0};
        var rect2 = { "x": 0.0, "y": 0.0};
        
        if (start_point["x"] < end_point["x"]) {
            rect1["x"] = start_point["x"];
            rect2["x"] = end_point["x"];             
        } else {
            rect2["x"] = start_point["x"];
            rect1["x"] = end_point["x"];
        }

        if (-start_point["y"] < -end_point["y"]) {
            rect1["y"] = -start_point["y"];
            rect2["y"] = -end_point["y"];             
        } else {
            rect2["y"] = -start_point["y"];
            rect1["y"] = -end_point["y"];
        }

        var width = Math.abs(rect1["x"]-rect2["x"]);
        var height= Math.abs(rect1["y"]-rect2["y"]);
        context.rect( rect1["x"]-(offset*6), rect1["y"]-(offset*6), width+(offset*6), height+(offset*6));
        context.strokeStyle = "rgba(0,0,0,0)";
        context.stroke();
        context.clip();

        var scale_factor = h/w;
        // scale context horizontally        
        context.scale(1, scale_factor);

        // draw circle which will be stretched into an oval
        context.beginPath();
        var radius =w/2-(offset*6);

        context.arc(0, 0, radius, 0, 2*Math.PI, true);
        
        // apply styling
        context.strokeStyle = color;
        context.lineWidth = 10;
        context.stroke();

        context.restore();
    }

    var ellipse = function (cx, cy, w, h, color){
        context.save();
        context.translate(cx, cy);

        // scale context horizontally
        context.scale(1, h/w);

        // draw circle which will be stretched into an oval
        context.beginPath();
        context.arc(0,0, w/2, 0, 2 * Math.PI,  false);
        
        // apply styling
        context.lineWidth = 5;
        context.strokeStyle = color;
        context.stroke();
        
        context.restore();
    }

    var line = function (cx, cy, length, angle) {
        var point = { "x": 0, "y": 0};
        context.beginPath();
        context.moveTo(cx,cy);
        
        point["x"] = length*Math.cos(angle);
        point["y"] = length*Math.sin(angle);

        context.lineTo(cx+point["x"],cy-point["y"]);

        context.lineWidth =4;
        context.stroke();

        return point;
    }

    var intersection_ellipse_line = function (a,b,y0,x0) {
        var intersection = { "x": 0, "y": 0};

        intersection["x"] = (a*b*x0)/Math.sqrt(a*a*y0*y0+b*b*x0*x0);
        intersection["y"] = (a*b*y0)/Math.sqrt(a*a*y0*y0+b*b*x0*x0);
        
        return intersection;
    }

    var intersection_ellipse_angle = function (a,b, angle) {
        var x0 = length*Math.cos(angle);
        var y0 = length*Math.sin(angle);
        var intersection = { "x": 0, "y": 0};

        intersection["x"] = (a*b*x0)/Math.sqrt(a*a*y0*y0+b*b*x0*x0);
        intersection["y"] = (a*b*y0)/Math.sqrt(a*a*y0*y0+b*b*x0*x0);
        
        return intersection;
    }

}